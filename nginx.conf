events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers (applied to all responses)
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Upstream Flask application
    upstream flask_app {
        server web-app:5000;
        keepalive 32;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;
        server_name _;

        # Security headers specific to this server
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Static file caching with far-future expires
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Try static files first, then proxy to Flask
            try_files $uri @flask;
        }

        # API endpoints with rate limiting
        location ~* ^/(api|login|register) {
            limit_req zone=api burst=20 nodelay;
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://flask_app;
            include /etc/nginx/proxy_params;
        }

        # Health check endpoint (no rate limiting)
        location /health {
            proxy_pass http://flask_app;
            include /etc/nginx/proxy_params;
            access_log off;
        }

        # Main application
        location / {
            # Basic rate limiting for regular requests
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://flask_app;
            include /etc/nginx/proxy_params;
            
            # Enable caching for some routes
            location ~* ^/(static|dashboard|accounts|transactions) {
                proxy_pass http://flask_app;
                include /etc/nginx/proxy_params;
                
                # Cache successful responses for 5 minutes
                proxy_cache_valid 200 5m;
                proxy_cache_use_stale error timeout invalid_header updating;
            }
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
