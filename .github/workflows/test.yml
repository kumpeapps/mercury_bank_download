name: Mercury Bank Platform Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        test-type: [unit, integration, models]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: mercury_bank_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r shared-requirements.txt
        pip install -r web_app/requirements.txt
        pip install -r sync_app/requirements.txt
        pip install -r requirements-test.txt

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h 127.0.0.1 -u test_user -ptest_password --silent; do
          sleep 1
        done

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=mysql+pymysql://test_user:test_password@127.0.0.1:3306/mercury_bank_test" >> $GITHUB_ENV
        echo "TEST_DATABASE_URL=mysql+pymysql://test_user:test_password@127.0.0.1:3306/mercury_bank_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "USERS_EXTERNALLY_MANAGED=false" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}/web_app:${{ github.workspace }}/sync_app" >> $GITHUB_ENV

    - name: Create test database schema
      run: |
        mysql -h 127.0.0.1 -u test_user -ptest_password -e "CREATE DATABASE IF NOT EXISTS mercury_bank_test;"

    - name: Run Alembic migrations
      run: |
        python migrate.py test-connection
        python migrate.py upgrade

    - name: Run ${{ matrix.test-type }} tests
      run: |
        ./run_tests.sh --${{ matrix.test-type }} --verbose --no-install

    - name: Upload coverage reports
      if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yml build

    - name: Start services
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30  # Wait for services to start

    - name: Check service health
      run: |
        # Check web app health
        timeout 60 bash -c 'until curl -f http://localhost:5001/health; do sleep 2; done'
        
        # Check if registration page loads
        curl -f http://localhost:5001/register
        
        echo "✅ Docker services are healthy"

    - name: Test user registration flow
      run: |
        # Test first user registration (should get admin roles)
        response=$(curl -s -X POST http://localhost:5001/register \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=testadmin&email=admin@test.com&password=adminpass123" \
          -w "%{http_code}")
        
        if [[ "$response" == *"302"* ]] || [[ "$response" == *"200"* ]]; then
          echo "✅ First user registration successful"
        else
          echo "❌ First user registration failed: $response"
          exit 1
        fi
        
        # Test second user registration (should get only user role)
        response=$(curl -s -X POST http://localhost:5001/register \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=testuser&email=user@test.com&password=userpass123" \
          -w "%{http_code}")
        
        if [[ "$response" == *"302"* ]] || [[ "$response" == *"200"* ]]; then
          echo "✅ Second user registration successful"
        else
          echo "❌ Second user registration failed: $response"
          exit 1
        fi

    - name: Verify user roles in database
      run: |
        # Check user roles in database
        docker exec $(docker-compose ps -q mysql) mysql -u mercury_user -pmercury_password mercury_bank \
          -e "SELECT u.username, GROUP_CONCAT(r.name) as roles FROM users u 
              LEFT JOIN user_roles ur ON u.id = ur.user_id 
              LEFT JOIN roles r ON ur.role_id = r.id 
              GROUP BY u.id, u.username 
              ORDER BY u.id;"

    - name: Stop services
      run: |
        docker-compose -f docker-compose.yml down -v

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r web_app/ sync_app/ -f json -o bandit-report.json || true
        bandit -r web_app/ sync_app/ -f txt

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
